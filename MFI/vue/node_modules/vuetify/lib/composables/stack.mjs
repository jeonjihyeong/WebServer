import { useToggleScope } from "./toggleScope.mjs";
import { computed, inject, onScopeDispose, provide, reactive, readonly, ref, watchEffect } from 'vue';
import { getCurrentInstance } from "../util/index.mjs"; // Types

const StackSymbol = Symbol.for('vuetify:stack');
const globalStack = reactive([]);
export function useStack(isActive, zIndex) {
  const vm = getCurrentInstance('useStack');
  const parent = inject(StackSymbol, undefined);
  const stack = reactive({
    activeChildren: new Set()
  });
  provide(StackSymbol, stack);

  const _zIndex = ref(+zIndex.value);

  useToggleScope(isActive, () => {
    var _globalStack$at;

    const lastZIndex = (_globalStack$at = globalStack.at(-1)) == null ? void 0 : _globalStack$at[1];
    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value;
    globalStack.push([vm.uid, _zIndex.value]);
    parent == null ? void 0 : parent.activeChildren.add(vm.uid);
    onScopeDispose(() => {
      const idx = globalStack.findIndex(v => v[0] === vm.uid);
      globalStack.splice(idx, 1);
      parent == null ? void 0 : parent.activeChildren.delete(vm.uid);
    });
  });
  const globalTop = ref(true);
  watchEffect(() => {
    var _globalStack$at2;

    const _isTop = ((_globalStack$at2 = globalStack.at(-1)) == null ? void 0 : _globalStack$at2[0]) === vm.uid;

    setTimeout(() => globalTop.value = _isTop);
  });
  const localTop = computed(() => !stack.activeChildren.size);
  return {
    globalTop: readonly(globalTop),
    localTop,
    stackStyles: computed(() => ({
      zIndex: _zIndex.value
    }))
  };
}
//# sourceMappingURL=stack.mjs.map