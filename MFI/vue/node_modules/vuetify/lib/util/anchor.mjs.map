{"version":3,"file":"anchor.mjs","names":["includes","block","inline","parseAnchor","anchor","isRtl","side","align","split","toPhysical","str","flipSide","center","top","bottom","left","right","flipAlign","flipCorner","getAxis"],"sources":["../../src/util/anchor.ts"],"sourcesContent":["import { includes } from '@/util/helpers'\n\nconst block = ['top', 'bottom'] as const\nconst inline = ['start', 'end', 'left', 'right'] as const\ntype Tblock = typeof block[number]\ntype Tinline = typeof inline[number]\nexport type Anchor =\n  | Tblock\n  | Tinline\n  | 'center'\n  | 'center center'\n  | `${Tblock} ${Tinline | 'center'}`\n  | `${Tinline} ${Tblock | 'center'}`\nexport type ParsedAnchor =\n  | { side: 'center', align: 'center' }\n  | { side: Tblock, align: 'left' | 'right' | 'center' }\n  | { side: 'left' | 'right', align: Tblock | 'center' }\n\n/** Parse a raw anchor string into an object */\nexport function parseAnchor (anchor: Anchor, isRtl: boolean) {\n  let [side, align] = anchor.split(' ') as [Tblock | Tinline | 'center', Tblock | Tinline | 'center' | undefined]\n  if (!align) {\n    align =\n      includes(block, side) ? 'start'\n      : includes(inline, side) ? 'top'\n      : 'center'\n  }\n\n  return {\n    side: toPhysical(side, isRtl),\n    align: toPhysical(align, isRtl),\n  } as ParsedAnchor\n}\n\nexport function toPhysical (str: 'center' | Tblock | Tinline, isRtl: boolean) {\n  if (str === 'start') return isRtl ? 'right' : 'left'\n  if (str === 'end') return isRtl ? 'left' : 'right'\n  return str\n}\n\nexport function flipSide (anchor: ParsedAnchor) {\n  return {\n    side: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left',\n    }[anchor.side],\n    align: anchor.align,\n  } as ParsedAnchor\n}\n\nexport function flipAlign (anchor: ParsedAnchor) {\n  return {\n    side: anchor.side,\n    align: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left',\n    }[anchor.align],\n  } as ParsedAnchor\n}\n\nexport function flipCorner (anchor: ParsedAnchor) {\n  return {\n    side: anchor.align,\n    align: anchor.side,\n  } as ParsedAnchor\n}\n\nexport function getAxis (anchor: ParsedAnchor) {\n  return includes(block, anchor.side) ? 'y' : 'x'\n}\n"],"mappings":"SAASA,Q;AAET,MAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,QAAR,CAAd;AACA,MAAMC,MAAM,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,CAAf;;AAeA;AACA,OAAO,SAASC,WAAT,CAAsBC,MAAtB,EAAsCC,KAAtC,EAAsD;EAC3D,IAAI,CAACC,IAAD,EAAOC,KAAP,IAAgBH,MAAM,CAACI,KAAP,CAAa,GAAb,CAApB;;EACA,IAAI,CAACD,KAAL,EAAY;IACVA,KAAK,GACHP,QAAQ,CAACC,KAAD,EAAQK,IAAR,CAAR,GAAwB,OAAxB,GACEN,QAAQ,CAACE,MAAD,EAASI,IAAT,CAAR,GAAyB,KAAzB,GACA,QAHJ;EAID;;EAED,OAAO;IACLA,IAAI,EAAEG,UAAU,CAACH,IAAD,EAAOD,KAAP,CADX;IAELE,KAAK,EAAEE,UAAU,CAACF,KAAD,EAAQF,KAAR;EAFZ,CAAP;AAID;AAED,OAAO,SAASI,UAAT,CAAqBC,GAArB,EAAuDL,KAAvD,EAAuE;EAC5E,IAAIK,GAAG,KAAK,OAAZ,EAAqB,OAAOL,KAAK,GAAG,OAAH,GAAa,MAAzB;EACrB,IAAIK,GAAG,KAAK,KAAZ,EAAmB,OAAOL,KAAK,GAAG,MAAH,GAAY,OAAxB;EACnB,OAAOK,GAAP;AACD;AAED,OAAO,SAASC,QAAT,CAAmBP,MAAnB,EAAyC;EAC9C,OAAO;IACLE,IAAI,EAAE;MACJM,MAAM,EAAE,QADJ;MAEJC,GAAG,EAAE,QAFD;MAGJC,MAAM,EAAE,KAHJ;MAIJC,IAAI,EAAE,OAJF;MAKJC,KAAK,EAAE;IALH,EAMJZ,MAAM,CAACE,IANH,CADD;IAQLC,KAAK,EAAEH,MAAM,CAACG;EART,CAAP;AAUD;AAED,OAAO,SAASU,SAAT,CAAoBb,MAApB,EAA0C;EAC/C,OAAO;IACLE,IAAI,EAAEF,MAAM,CAACE,IADR;IAELC,KAAK,EAAE;MACLK,MAAM,EAAE,QADH;MAELC,GAAG,EAAE,QAFA;MAGLC,MAAM,EAAE,KAHH;MAILC,IAAI,EAAE,OAJD;MAKLC,KAAK,EAAE;IALF,EAMLZ,MAAM,CAACG,KANF;EAFF,CAAP;AAUD;AAED,OAAO,SAASW,UAAT,CAAqBd,MAArB,EAA2C;EAChD,OAAO;IACLE,IAAI,EAAEF,MAAM,CAACG,KADR;IAELA,KAAK,EAAEH,MAAM,CAACE;EAFT,CAAP;AAID;AAED,OAAO,SAASa,OAAT,CAAkBf,MAAlB,EAAwC;EAC7C,OAAOJ,QAAQ,CAACC,KAAD,EAAQG,MAAM,CAACE,IAAf,CAAR,GAA+B,GAA/B,GAAqC,GAA5C;AACD"}